.NET
----

1. How to convert string to int
	 Parse, TryParse, Convert and casting
	
2. Difference between EXE and DLL?
	 EXEs have an entry point
	
3. How do I create a DLL in C#?
	 With Class Library
	
4. Differences between public, private, protected and internal
	 Public is seen by everyone
	 Protected is seen by the inherited classes
	 Private only within that class
	 Internal inside the project

5. Can DateTime be null?
	 Nope. DateTime is a Value Type

6. What's the out keyword?
	 It's a parameter in a method that is expected to return a value
	 ref is similar, but it needs to be initialized to something

7. What is the advantage of using System.Text.StringBuilder to System.String?
	 StringBuilder is more efficient when manipulating the string continuously, it 
	 reserves space where the operations take place.
	 String generates a new string every time we manipulate it, as in:
	 string s = "Helo";
	 s += " World"; //In this case, a new string is created and the other is left 
	 to be recovered by the garbage collector.
	 String is an Immutable.

8. What's a muticast delegate? ***
	 Delegates are abstract pointers to methods.
	 	We can use this abstract pointer to invoke these methods
	 It's a delegate that can have more than one element in its invocation.	 

9. What is Event?
	 It's an occurrence that is raised by the GUI, a specific time or artificially
	 by code.

10. What are events and what is the difference between delegates and events?
		Events are occurrences generated by GUI or raised artificially.
		The only common thing is that they are activated indirectly. An event by
		an occurrence that doesn't necessarily follow the flow of the code and
		a delegate when the delegte pointer is invoked.
		
11. What is Partial Types?
		It is possible to split the definition of a class or a struct, an interface 
		or a method over two or more source files. Each source file contains a 
		section of the type or method definition, and all parts are combined when 
		the application is compiled.

12. What is Indexer? ***
		Indexers allow instances of a class or struct to be indexed just like arrays.

13. In Object Oriented Programming (OOP) how would you describe encapsulation?
		A construct where properties and behaviour are bundled together in a class

14. What is "this"? Can "this" be used within a static method?
		This is a reference to the instance of the containing class.
		No, there is no this "this" because there is no instance.

15. When do you have to declare a class abstract? ***
		Since an abstract class cannot be instantiated, we require the user of that
		class to inherit from it.
		An interface is similar in that it cannot be instantiated, but an Interface:
		A. Has no code, just the behavioral "contract".
		B. Forced the user to implement all its methods.

16. Can you declare the override method static while the original method is
		non-static? ***
		No.
		
17. What are the problems of multiple class inheritance?
		First, C# doesn't allow it.
		Languages that allow it, aside from the natural complications that come with
		it, two classes may conflict if they use the same method name.

18. Assume that a class Class1 has both instance and static constructors. Given
		the code below, how many times will the static and instance constructors fire?

19. What are generics in C#.NET?
		An element of C# that makes it possible to design classes and methods that 
		defer the specification of one or more types until the class or method is 
		declared and instantiated by client code. 

20. What is the difference between const and readonly in C# .Net?
		const variables are known or set at compile time, while readonly variables
		are known at runtime.
		const are accessed as <Class Name>.<constant> while readonly variables are
		accessed as <Instance of Class>.<readonly variable>

21. Why you cannot specify the accessibility modifier for methods inside the 
		interface?
		Because the interface shows everything that we need to be exposed.

22. What is the difference between an Interface and an Abstract Class?
		Since an abstract class cannot be instantiated, we require the user of that
		class to inherit from it.
		An interface is similar in that it cannot be instantiated, but an Interface:
		A. Has no code, just the behavioral "contract".
		B. Forced the user to implement all its methods

23. What is the top .NET class that everything is derived from?
		System.Object

24. Can you inherit multiple Interfaces?
		Not really. You can Implement multiple Interfaces.

25. What are the fundamental differences between value and reference types?
		A Value Type holds the data within its own memory allocation and a Reference
		Type contains a pointer to another memory location that holds the real data.
		
26. Is string a value or a reference type?
		It's a reference type, even though it looks or behaves like a value type.
		Since Strings can be huge, they cannot be passed as value, because they
		would use a lot of stack space. The Stack size is ~1MB.
		